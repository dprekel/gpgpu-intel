----------------------------------------------------------------------------------------------
Issues / Jobs left
----------------------------------------------------------------------------------------------

CreateDevice:
- Remove log.cpp and create LOGGING macros in Debug mode
- Find all device files
- Retrieve device info from HardwareConfigBlob 
- Load compilers here
- Solve issue with std::move warning
- How do I select a device if we have more then one GPU

CreateContext:
- create TagBuffer

CreateBuffer:
- check if allocated memory is page aligned and a multiple of the cache line size
- finish execBuffer submission

BuildKernel:
- Support kernel compilation for all other architectures
- finish kernel disassembly
- Write functions for determination of interface IDs and InterfaceVersions
- Write function for construction of internalOptions string (query info from device structs)
- Freeing memory after compilation (writing destructor)
- Test driver with different IGC versions from Github and Ubuntu repos
- Is Mutex required?
- Release() functions: Free buffer object memory and memory allocated by compiler

EnqueueNDRangeKernel:
- create SipKernel buffer
- create Scratch Surface buffer
- finish creation of the two command buffers
- finish creation of ssh, ioh and dsh buffers
- Get rid of all memory leaks
- Add clFinish functionality
- Use new for aligned malloc
- Make sure all API functions can only be called in correct order
- Add aligned free for buffer objects
- make sure that a new kernel can only be submitted if a previous kernel has finished execution




















- GEN9 commands (which ones are important?):
    - BINDING_TABLE_STATE
    - GPGPU_WALKER
    - INTERFACE_DESCRIPTOR_DATA
    - MEDIA_INTERFACE_DESCRIPTOR_LOAD
    - MEDIA_STATE_FLUSH
    - MEDIA_VFE_STATE
    - MI_ARB_CHECK
    - MI_ATOMIC
    - MI_BATCH_BUFFER_END
    - MI_BATCH_BUFFER_START
    - MI_LOAD_REGISTER_IMM
    - MI_LOAD_REGISTER_MEM
    - MI_LOAD_REGISTER_REG
    - MI_NOOP
    - MI_STORE_REGISTER_MEM
    - PIPELINE_SELECT
    - PIPE_CONTROL
    - RENDER_SURFACE_STATE
    - SAMPLER_STATE
    - STATE_BASE_ADDRESS
    - MI_REPORT_PERF_COUNT
    - GPGPU_CSR_BASE_ADDRESS
    - STATE_SIP
    - MI_USER_INTERRUPT
    - MI_FLUSH_DW
    - XY_SRC_COPY_BLT
    - XY_COLOR_BLT
    - GRF
    - MEDIA_SURFACE_STATE
    - MI_MATH
    - MI_MATH_ALU_INST_INLINE
    - MI_SEMAPHORE_WAIT
    - MI_STORE_DATA_IMM
    - SAMPLER_BORDER_COLOR_STATE


dispatchWalker()  hardware_interface_base.inl   (otain indirect heaps, align dsh, Kernel Tuning, dispatch Kernel commands, flush caches)
    |
    v
dispatchKernelCommands()  hardware_interface_base.inl   (workgroup offsets, programWalker)
    |
    v
programWalker()  hardware_interface_bdw_and_later.inl   (sendIndirectState + setGpgpuWalkerThreadData)
    |
    v
sendIndirectState()  hardware_commands_helper_base.inl  (fill dsh, ioh, ssh)


DumpProgramBinaries command:
$ gdb --args ./cliloader --dump-output-binaries ./GEMM






